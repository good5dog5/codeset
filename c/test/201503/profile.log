SCRIPT  /usr/share/vim/vim74/syntax/nosyntax.vim
Sourced 1 time
Total time:   0.000634
 Self time:   0.000519

count  total (s)   self (s)
                            " Vim syntax support file
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2006 Apr 16
                            
                            " This file is used for ":syntax off".
                            " It removes the autocommands and stops highlighting for all buffers.
                            
    1              0.000016 if !has("syntax")
                              finish
                            endif
                            
                            " Remove all autocommands for the Syntax event.  This also avoids that
                            " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.
    1              0.000177 au! Syntax
                            
                            " remove all syntax autocommands and remove the syntax for each buffer
    1              0.000003 augroup syntaxset
    1              0.000101   au!
    1              0.000017   au BufEnter * syn clear
    1              0.000007   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif
    1   0.000131   0.000016   doautoall syntaxset BufEnter *
    1              0.000112   au!
    1              0.000015 augroup END
                            
    1              0.000006 if exists("syntax_on")
    1              0.000006   unlet syntax_on
    1              0.000002 endif
    1              0.000005 if exists("syntax_manual")
                              unlet syntax_manual
                            endif

FUNCTION  <SNR>26_invoke_funcrefs()
Called 1 time
Total time:   0.009276
 Self time:   0.000111

count  total (s)   self (s)
    1   0.000076   0.000027   let builder = airline#builder#new(a:context)
    1   0.001758   0.000033   let err = airline#util#exec_funcrefs(a:funcrefs + s:core_funcrefs, builder, a:context)
    1              0.000002   if err == 1
    1   0.007408   0.000017     let a:context.line = builder.build()
    1              0.000008     let s:contexts[a:context.winnr] = a:context
    1              0.000017     call setwinvar(a:context.winnr, '&statusline', '%!airline#statusline('.a:context.winnr.')')
    1              0.000001   endif

FUNCTION  airline#util#exec_funcrefs()
Called 1 time
Total time:   0.001725
 Self time:   0.000216

count  total (s)   self (s)
    5              0.000015     for Fn in a:list
    5   0.001671   0.000162       let code = call(Fn, a:000)
    5              0.000011       if code != 0
    1              0.000002         return code
                                  endif
    4              0.000004     endfor
                                return 0

FUNCTION  airline#extensions#netrw#apply()
Called 1 time
Total time:   0.000035
 Self time:   0.000035

count  total (s)   self (s)
    1              0.000007   if &ft == 'netrw'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.'netrw'.spc)
                                if exists('*airline#extensions#branch#get_head')
                                  call a:1.add_section('airline_b', spc.'%{airline#extensions#branch#get_head()}'.spc)
                                endif
                                call a:1.add_section('airline_c', spc.'%f'.spc)
                                call a:1.split()
                                call a:1.add_section('airline_y', spc.'%{airline#extensions#netrw#sortstring()}'.spc)
                                return 1
                              endif

FUNCTION  airline#extensions#unite#apply()
Called 1 time
Total time:   0.000029
 Self time:   0.000029

count  total (s)   self (s)
    1              0.000008   if &ft == 'unite'
                                call a:1.add_section('airline_a', ' Unite ')
                                call a:1.add_section('airline_b', ' %{get(unite#get_context(), "buffer_name", "")} ')
                                call a:1.add_section('airline_c', ' %{unite#get_status_string()} ')
                                call a:1.split()
                                call a:1.add_section('airline_y', ' %{get(unite#get_context(), "real_buffer_name", "")} ')
                                return 1
                              endif

FUNCTION  <SNR>94_get_accented_line()
Called 7 times
Total time:   0.000749
 Self time:   0.000749

count  total (s)   self (s)
    7              0.000023   if a:self._context.active
    7              0.000021     let contents = []
    7              0.000095     let content_parts = split(a:contents, '__accent')
   16              0.000050     for cpart in content_parts
    9              0.000132       let accent = matchstr(cpart, '_\zs[^#]*\ze')
    9              0.000073       call add(contents, cpart)
    9              0.000025     endfor
    7              0.000041     let line = join(contents, a:group)
    7              0.000095     let line = substitute(line, '__restore__', a:group, 'g')
    7              0.000011   else
                                let line = substitute(a:contents, '%#__accent[^#]*#', '', 'g')
                                let line = substitute(line, '%#__restore__#', '', 'g')
                              endif
    7              0.000015   return line

FUNCTION  <SNR>94_get_seperator()
Called 5 times
Total time:   0.004770
 Self time:   0.000165

count  total (s)   self (s)
    5   0.001956   0.000071   if s:should_change_group(a:prev_group, a:group)
    5   0.002803   0.000083     return s:get_transitioned_seperator(a:self, a:prev_group, a:group, a:side)
                              else
                                return a:side ? a:self._context.left_alt_sep : a:self._context.right_alt_sep
                              endif

FUNCTION  airline#check_mode()
Called 5 times
Total time:   0.000640
 Self time:   0.000640

count  total (s)   self (s)
    5              0.000035   let context = s:contexts[a:winnr]
                            
    5              0.000025   if get(w:, 'airline_active', 1)
    5              0.000024     let l:m = mode()
    5              0.000016     if l:m ==# "i"
                                  let l:mode = ['insert']
                                elseif l:m ==# "R"
                                  let l:mode = ['replace']
                                elseif l:m =~# '\v(v|V||s|S|)'
                                  let l:mode = ['visual']
                                else
    5              0.000021       let l:mode = ['normal']
    5              0.000008     endif
    5              0.000038     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
    5              0.000008   else
                                let l:mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
                              endif
                            
    5              0.000023   if g:airline_detect_modified && &modified
                                call add(l:mode, 'modified')
                              endif
                            
    5              0.000015   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
                              endif
                            
    5              0.000013   if &readonly || ! &modifiable
                                call add(l:mode, 'readonly')
                              endif
                            
    5              0.000040   let mode_string = join(l:mode)
    5              0.000033   if get(w:, 'airline_lastmode', '') != mode_string
                                call airline#highlighter#highlight_modified_inactive(context.bufnr)
                                call airline#highlighter#highlight(l:mode)
                                let w:airline_lastmode = mode_string
                              endif
                            
    5              0.000009   return ''

FUNCTION  airline#util#append()
Called 15 times
Total time:   0.000299
 Self time:   0.000299

count  total (s)   self (s)
   15              0.000055   if a:minwidth > 0 && winwidth(0) < a:minwidth
                                return ''
                              endif
   15              0.000086   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
   15              0.000078   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  airline#themes#get_highlight()
Called 12 times
Total time:   0.002051
 Self time:   0.000146

count  total (s)   self (s)
   12   0.002037   0.000132   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>91_exec_separator()
Called 6 times
Total time:   0.002842
 Self time:   0.000419

count  total (s)   self (s)
    6   0.001114   0.000081   let l:from = airline#themes#get_highlight(a:from.a:suffix)
    6   0.001078   0.000060   let l:to = airline#themes#get_highlight(a:to.a:suffix)
    6              0.000035   let group = a:from.'_to_'.a:to.a:suffix
    6              0.000012   if a:inverse
    2              0.000016     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
    2              0.000002   else
    4              0.000032     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
    4              0.000007   endif
    6              0.000029   let a:dict[group] = colors
    6   0.000460   0.000088   call airline#highlighter#exec(group, colors)

FUNCTION  airline#parts#filetype()
Called 5 times
Total time:   0.000021
 Self time:   0.000021

count  total (s)   self (s)
    5              0.000015   return &filetype

FUNCTION  airline#parts#iminsert()
Called 5 times
Total time:   0.000062
 Self time:   0.000062

count  total (s)   self (s)
    5              0.000023   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
                              endif
    5              0.000008   return ''

FUNCTION  <SNR>94_should_change_group()
Called 5 times
Total time:   0.001885
 Self time:   0.000239

count  total (s)   self (s)
    5              0.000020   if a:group1 == a:group2
                                return 0
                              endif
    5   0.000918   0.000064   let color1 = airline#highlighter#get_highlight(a:group1)
    5   0.000835   0.000043   let color2 = airline#highlighter#get_highlight(a:group2)
    5              0.000024   if has('gui_running')
                                return color1[1] != color2[1] || color1[0] != color2[0]
                              else
    5              0.000030     return color1[3] != color2[3] || color1[2] != color2[2]
                              endif

FUNCTION  <SNR>96_build_sections()
Called 2 times
Total time:   0.000989
 Self time:   0.000194

count  total (s)   self (s)
    9              0.000024   for key in a:keys
    7              0.000025     if key == 'warning' && !a:context.active
                                  continue
                                endif
    7   0.000871   0.000076     call s:add_section(a:builder, a:context, key)
    7              0.000012   endfor

FUNCTION  airline#extensions#tabline#get_buffer_name()
Called 2 times
Total time:   0.000578
 Self time:   0.000077

count  total (s)   self (s)
    2   0.000573   0.000072   return airline#extensions#tabline#{s:formatter}#format(a:nr, get(s:, 'current_buffer_list', s:get_buffer_list()))

FUNCTION  <SNR>96_get_section()
Called 8 times
Total time:   0.000467
 Self time:   0.000413

count  total (s)   self (s)
    8              0.000040   if has_key(s:section_truncate_width, a:key)
    4              0.000021     if winwidth(a:winnr) < s:section_truncate_width[a:key]
                                  return ''
                                endif
    4              0.000004   endif
    8              0.000028   let spc = g:airline_symbols.space
    8   0.000158   0.000104   let text = airline#util#getwinvar(a:winnr, 'airline_section_'.a:key, g:airline_section_{a:key})
    8              0.000086   let [prefix, suffix] = [get(a:000, 0, '%('.spc), get(a:000, 1, spc.'%)')]
    8              0.000050   return empty(text) ? '' : prefix.text.suffix

FUNCTION  <SNR>94_get_prev_group()
Called 10 times
Total time:   0.000262
 Self time:   0.000262

count  total (s)   self (s)
   10              0.000040   let x = a:i - 1
   12              0.000032   while x >= 0
   11              0.000054     let group = a:sections[x][0]
   11              0.000040     if group != '' && group != '|'
    9              0.000020       return group
                                endif
    2              0.000006     let x = x - 1
    2              0.000011   endwhile
    1              0.000002   return ''

FUNCTION  airline#extensions#default#apply()
Called 1 time
Total time:   0.001216
 Self time:   0.000144

count  total (s)   self (s)
    1              0.000006   let winnr = a:context.winnr
    1              0.000003   let active = a:context.active
                            
    1   0.000039   0.000030   if airline#util#getwinvar(winnr, 'airline_render_left', active || (!active && !g:airline_inactive_collapse))
    1   0.000475   0.000028     call s:build_sections(a:builder, a:context, s:layout[0])
    1              0.000002   else
                                let text = s:get_section(winnr, 'c')
                                if empty(text)
                                  let text = ' %f%m '
                                endif
                                call a:builder.add_section('airline_c'.(a:context.bufnr), text)
                              endif
                            
    1   0.000095   0.000028   call a:builder.split(s:get_section(winnr, 'gutter', '', ''))
                            
    1   0.000015   0.000008   if airline#util#getwinvar(winnr, 'airline_render_right', 1)
    1   0.000552   0.000010     call s:build_sections(a:builder, a:context, s:layout[1])
    1              0.000001   endif
                            
    1              0.000002   return 1

FUNCTION  airline#util#wrap()
Called 25 times
Total time:   0.000285
 Self time:   0.000285

count  total (s)   self (s)
   25              0.000101   if a:minwidth > 0 && winwidth(0) < a:minwidth
                                return ''
                              endif
   25              0.000072   return a:text

FUNCTION  airline#extensions#tabline#get()
Called 2 times
Total time:   0.000161
 Self time:   0.000104

count  total (s)   self (s)
    2              0.000025   let curtabcnt = tabpagenr('$')
    2              0.000009   if curtabcnt != s:current_tabcnt
                                let s:current_tabcnt = curtabcnt
                                let s:current_bufnr = -1  " force a refresh...
                              endif
    2              0.000009   if s:show_buffers && curtabcnt == 1 || !s:show_tabs
    2   0.000092   0.000035     return s:get_buffers()
                              else
                                return s:get_tabs()
                              endif

FUNCTION  <SNR>25_on_window_changed()
Called 1 time
Total time:   0.009550
 Self time:   0.000067

count  total (s)   self (s)
    1              0.000009   if pumvisible()
                                return
                              endif
    1   0.000059   0.000021   call <sid>init()
    1   0.009472   0.000027   call airline#update_statusline()

FUNCTION  airline#util#getwinvar()
Called 10 times
Total time:   0.000070
 Self time:   0.000070

count  total (s)   self (s)
   10              0.000058     return getwinvar(a:winnr, a:key, a:def)

FUNCTION  airline#extensions#whitespace#check()
Called 5 times
Total time:   0.000381
 Self time:   0.000381

count  total (s)   self (s)
    5              0.000040   if &readonly || !&modifiable || !s:enabled || line('$') > s:max_lines
                                return ''
                              endif
                            
    5              0.000029   if !exists('b:airline_whitespace_check')
                                let b:airline_whitespace_check = ''
                                let checks = get(g:, 'airline#extensions#whitespace#checks', s:default_checks)
                            
                                let trailing = 0
                                if index(checks, 'trailing') > -1
                                  let trailing = search('\s$', 'nw')
                                endif
                            
                                let mixed = 0
                                if index(checks, 'indent') > -1
                                  let mixed = s:check_mixed_indent()
                                endif
                            
                                if trailing != 0 || mixed != 0
                                  let b:airline_whitespace_check = s:symbol
                                  if s:show_message
                                    if trailing != 0
                                      let b:airline_whitespace_check .= (g:airline_symbols.space).printf(s:trailing_format, trailing)
                                    endif
                                    if mixed != 0
                                      let b:airline_whitespace_check .= (g:airline_symbols.space).printf(s:mixed_indent_format, mixed)
                                    endif
                                  endif
                                endif
                              endif
    5              0.000015   return b:airline_whitespace_check

FUNCTION  <SNR>25_init()
Called 1 time
Total time:   0.000038
 Self time:   0.000038

count  total (s)   self (s)
    1              0.000005   if !s:airline_initialized
                                let s:airline_initialized = 1
                            
                                call airline#init#bootstrap()
                                call airline#extensions#load()
                                call airline#init#sections()
                            
                                let s:airline_theme_defined = exists('g:airline_theme')
                                if s:airline_theme_defined || !airline#switch_matching_theme()
                                  let g:airline_theme = get(g:, 'airline_theme', 'dark')
                                  call airline#switch_theme(g:airline_theme)
                                endif
                              endif

FUNCTION  airline#update_statusline()
Called 1 time
Total time:   0.009445
 Self time:   0.000169

count  total (s)   self (s)
    1              0.000022   for nr in filter(range(1, winnr('$')), 'v:val != winnr()')
                                call setwinvar(nr, 'airline_active', 0)
                                let context = { 'winnr': nr, 'active': 0, 'bufnr': winbufnr(nr) }
                                call s:invoke_funcrefs(context, s:inactive_funcrefs)
                              endfor
                            
    1              0.000004   unlet! w:airline_render_left
    1              0.000002   unlet! w:airline_render_right
    9              0.000016   for section in s:sections
    8              0.000027     unlet! w:airline_section_{section}
    8              0.000011   endfor
                            
    1              0.000003   let w:airline_active = 1
    1              0.000010   let context = { 'winnr': winnr(), 'active': 1, 'bufnr': winbufnr(winnr()) }
    1   0.009310   0.000034   call s:invoke_funcrefs(context, g:airline_statusline_funcrefs)

FUNCTION  <SNR>94_get_transitioned_seperator()
Called 6 times
Total time:   0.003260
 Self time:   0.000256

count  total (s)   self (s)
    6              0.000019   let line = ''
    6   0.003089   0.000085   call airline#highlighter#add_separator(a:prev_group, a:group, a:side)
    6              0.000045   let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
    6              0.000039   let line .= a:side ? a:self._context.left_sep : a:self._context.right_sep
    6              0.000026   let line .= '%#'.a:group.'#'
    6              0.000013   return line

FUNCTION  <SNR>91_get_syn()
Called 44 times
Total time:   0.001990
 Self time:   0.001990

count  total (s)   self (s)
                              " need to pass in mode, known to break on 7.3.547
   44              0.000294   let mode = has('gui_running') ? 'gui' : 'cterm'
   44              0.000420   let color = synIDattr(synIDtrans(hlID(a:group)), a:what, mode)
   44              0.000167   if empty(color) || color == -1
                                let color = synIDattr(synIDtrans(hlID('Normal')), a:what, mode)
                              endif
   44              0.000138   if empty(color) || color == -1
                                if has('gui_running')
                                  let color = a:what ==# 'fg' ? '#000000' : '#FFFFFF'
                                else
                                  let color = a:what ==# 'fg' ? 0 : 1
                                endif
                              endif
   44              0.000082   return color

FUNCTION  <SNR>96_add_section()
Called 7 times
Total time:   0.000795
 Self time:   0.000294

count  total (s)   self (s)
                                " i have no idea why the warning section needs special treatment, but it's
                                " needed to prevent separators from showing up
    7              0.000021     if a:key == 'warning'
    1   0.000020   0.000011       call a:builder.add_raw('%(')
    1              0.000001     endif
    7   0.000628   0.000144     call a:builder.add_section('airline_'.a:key, s:get_section(a:context.winnr, a:key))
    7              0.000023     if a:key == 'warning'
    1   0.000015   0.000007       call a:builder.add_raw('%)')
    1              0.000001     endif

FUNCTION  <SNR>89_get_buffer_list()
Called 2 times
Total time:   0.000235
 Self time:   0.000235

count  total (s)   self (s)
    2              0.000008   let buffers = []
    2              0.000010   let cur = bufnr('%')
    4              0.000022   for nr in range(1, bufnr('$'))
    2              0.000011     if buflisted(nr) && bufexists(nr)
    2              0.000005       let toadd = 1
    2              0.000006       for ex in s:excludes
                                    if match(bufname(nr), ex) >= 0
                                      let toadd = 0
                                      break
                                    endif
                                  endfor
    2              0.000011       if getbufvar(nr, 'current_syntax') == 'qf'
                                    let toadd = 0
                                  endif
    2              0.000004       if toadd
    2              0.000025         call add(buffers, nr)
    2              0.000004       endif
    2              0.000002     endif
    2              0.000003   endfor
                            
    2              0.000008   let s:current_buffer_list = buffers
    2              0.000005   return buffers

FUNCTION  airline#parts#ffenc()
Called 5 times
Total time:   0.000101
 Self time:   0.000101

count  total (s)   self (s)
    5              0.000096   return printf('%s%s', &fenc, strlen(&ff) > 0 ? '['.&ff.']' : '')

FUNCTION  airline#parts#paste()
Called 5 times
Total time:   0.000032
 Self time:   0.000032

count  total (s)   self (s)
    5              0.000025   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  airline#parts#readonly()
Called 5 times
Total time:   0.000028
 Self time:   0.000028

count  total (s)   self (s)
    5              0.000021   return &readonly ? g:airline_symbols.readonly : ''

FUNCTION  airline#highlighter#exec()
Called 6 times
Total time:   0.000372
 Self time:   0.000372

count  total (s)   self (s)
    6              0.000020   let colors = a:colors
    6              0.000016   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
                              endif
    6              0.000240   exec printf('hi %s %s %s %s %s %s %s %s', a:group, get(colors, 0, '') != '' ? 'guifg='.colors[0] : '', get(colors, 1, '') != '' ? 'guibg='.colors[1] : '', get(colors, 2, '') != '' ? 'ctermfg='.colors[2] : '', get(colors, 3, '') != '' ? 'ctermbg='.colors[3] : '', get(colors, 4, '') != '' ? 'gui='.colors[4] : '', get(colors, 4, '') != '' ? 'cterm='.colors[4] : '', get(colors, 4, '') != '' ? 'term='.colors[4] : '')

FUNCTION  <SNR>89_get_buffers()
Called 2 times
Total time:   0.000057
 Self time:   0.000057

count  total (s)   self (s)
    2              0.000014   let cur = bufnr('%')
    2              0.000007   if cur == s:current_bufnr
    2              0.000022     if !g:airline_detect_modified || getbufvar(cur, '&modified') == s:current_modified
    2              0.000008       return s:current_tabline
                                endif
                              endif
                            
                              let l:index = 1
                              let b = s:new_builder()
                              let tab_bufs = tabpagebuflist(tabpagenr())
                              for nr in s:get_visible_buffers()
                                if nr < 0
                                  call b.add_raw('%#airline_tabhid#...')
                                  continue
                                endif
                            
                                if cur == nr
                                  if g:airline_detect_modified && getbufvar(nr, '&modified')
                                    let group = 'airline_tabmod'
                                  else
                                    let group = 'airline_tabsel'
                                  endif
                                  let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
                                else
                                  if g:airline_detect_modified && getbufvar(nr, '&modified')
                                    let group = 'airline_tabmod_unsel'
                                  elseif index(tab_bufs, nr) > -1
                                    let group = 'airline_tab'
                                  else
                                    let group = 'airline_tabhid'
                                  endif
                                endif
                            
                                if s:buffer_idx_mode
                                  if len(s:number_map) > 0
                                    call b.add_section(group, s:spc . get(s:number_map, l:index, '') . '%(%{airline#extensions#tabline#get_buffer_name('.nr.')}%)' . s:spc)
                                  else
                                    call b.add_section(group, '['.l:index.s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.nr.')}%)'.']')
                                  endif
                                  let l:index = l:index + 1
                                else
                                  call b.add_section(group, s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.nr.')}%)'.s:spc)
                                endif
                              endfor
                            
                              call b.add_section('airline_tabfill', '')
                              call b.split()
                              call b.add_section('airline_tabfill', '')
                              call b.add_section('airline_tabtype', ' buffers ')
                            
                              let s:current_bufnr = cur
                              let s:current_tabline = b.build()
                              return s:current_tabline

FUNCTION  airline#extensions#tabline#default#wrap_name()
Called 2 times
Total time:   0.000067
 Self time:   0.000067

count  total (s)   self (s)
    2              0.000014   let _ = s:buf_nr_show ? printf(s:buf_nr_format, a:bufnr) : ''
    2              0.000022   let _ .= substitute(a:buffer_name, '\\', '/', 'g')
                            
    2              0.000012   if getbufvar(a:bufnr, '&modified') == 1
                                let _ .= s:buf_modified_symbol
                              endif
    2              0.000004   return _

FUNCTION  airline#parts#mode()
Called 5 times
Total time:   0.000032
 Self time:   0.000032

count  total (s)   self (s)
    5              0.000025   return get(w:, 'airline_current_mode', '')

FUNCTION  airline#extensions#quickfix#apply()
Called 1 time
Total time:   0.000021
 Self time:   0.000021

count  total (s)   self (s)
    1              0.000006   if &buftype == 'quickfix'
                                let w:airline_section_a = s:get_text()
                                let w:airline_section_b = '%{get(w:, "quickfix_title", "")}'
                                let w:airline_section_c = ''
                                let w:airline_section_x = ''
                              endif

FUNCTION  <SNR>84_is_excluded_window()
Called 1 time
Total time:   0.000103
 Self time:   0.000103

count  total (s)   self (s)
    1              0.000006   for matchft in g:airline_exclude_filetypes
                                if matchft ==# &ft
                                  return 1
                                endif
                              endfor
                            
    4              0.000011   for matchw in g:airline_exclude_filenames
    3              0.000044     if matchstr(expand('%'), matchw) ==# matchw
                                  return 1
                                endif
    3              0.000004   endfor
                            
    1              0.000003   if g:airline_exclude_preview && &previewwindow
                                return 1
                              endif
                            
    1              0.000002   return 0

FUNCTION  234()
Called 1 time
Total time:   0.000012
 Self time:   0.000012

count  total (s)   self (s)
    1              0.000011   call add(self._sections, ['|', a:0 ? a:1 : '%='])

FUNCTION  236()
Called 7 times
Total time:   0.000072
 Self time:   0.000072

count  total (s)   self (s)
    7              0.000063   call add(self._sections, [a:group, a:contents])

FUNCTION  237()
Called 2 times
Total time:   0.000017
 Self time:   0.000017

count  total (s)   self (s)
    2              0.000017   call add(self._sections, ['', a:text])

FUNCTION  238()
Called 1 time
Total time:   0.007391
 Self time:   0.001070

count  total (s)   self (s)
    1              0.000003   let side = 1
    1              0.000002   let line = ''
    1              0.000002   let i = 0
    1              0.000027   let length = len(self._sections)
    1              0.000003   let split = 0
                            
   11              0.000030   while i < length
   10              0.000047     let section = self._sections[i]
   10              0.000039     let group = section[0]
   10              0.000039     let contents = section[1]
   10   0.000380   0.000118     let prev_group = s:get_prev_group(self._sections, i)
                            
   10              0.000024     if group == ''
    2              0.000010       let line .= contents
    2              0.000004     elseif group == '|'
    1              0.000003       let side = 0
    1              0.000004       let line .= contents
    1              0.000003       let split = 1
    1              0.000001     else
    7              0.000016       if prev_group == ''
    1              0.000005         let line .= '%#'.group.'#'
    1              0.000002       elseif split
    1   0.000552   0.000012         let line .= s:get_transitioned_seperator(self, prev_group, group, side)
    1              0.000002         let split = 0
    1              0.000001       else
    5   0.004862   0.000092         let line .= s:get_seperator(self, prev_group, group, side)
    5              0.000008       endif
    7   0.000877   0.000128       let line .= s:get_accented_line(self, group, contents)
    7              0.000010     endif
                            
   10              0.000038     let i = i + 1
   10              0.000019   endwhile
                            
    1              0.000002   if !self._context.active
                                let line = substitute(line, '%#.\{-}\ze#', '\0_inactive', 'g')
                              endif
    1              0.000003   return line

FUNCTION  airline#highlighter#add_separator()
Called 6 times
Total time:   0.003004
 Self time:   0.000162

count  total (s)   self (s)
    6              0.000056   let s:separators[a:from.a:to] = [a:from, a:to, a:inverse]
    6   0.002940   0.000098   call <sid>exec_separator({}, a:from, a:to, a:inverse, '')

FUNCTION  airline#statusline()
Called 5 times
Total time:   0.000132
 Self time:   0.000132

count  total (s)   self (s)
    5              0.000048   if has_key(s:contexts, a:winnr)
    5              0.000063     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                            
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  airline#extensions#apply()
Called 1 time
Total time:   0.000208
 Self time:   0.000105

count  total (s)   self (s)
    1              0.000005   let s:active_winnr = winnr()
                            
    1   0.000132   0.000029   if s:is_excluded_window()
                                return -1
                              endif
                            
    1              0.000003   if &buftype == 'help'
                                call airline#extensions#apply_left_override('Help', '%f')
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
                                let w:airline_render_right = 1
                              endif
                            
    1              0.000002   if &previewwindow
                                let w:airline_section_a = 'Preview'
                                let w:airline_section_b = ''
                                let w:airline_section_c = bufname(winbufnr(winnr()))
                              endif
                            
    1              0.000008   if has_key(s:filetype_overrides, &ft)
                                let args = s:filetype_overrides[&ft]
                                call airline#extensions#apply_left_override(args[0], args[1])
                              endif
                            
    1              0.000006   for item in items(s:filetype_regex_overrides)
                                if match(&ft, item[0]) >= 0
                                  call airline#extensions#apply_left_override(item[1][0], item[1][1])
                                endif
                              endfor

FUNCTION  airline#highlighter#get_highlight()
Called 22 times
Total time:   0.003551
 Self time:   0.001132

count  total (s)   self (s)
   22   0.001221   0.000191   let fg = s:get_syn(a:group, 'fg')
   22   0.001147   0.000187   let bg = s:get_syn(a:group, 'bg')
   22              0.000422   let reverse = has('gui_running') ? synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'gui') : synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')|| synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'term')
   22   0.000697   0.000268   return reverse ? s:get_array(bg, fg, a:000) : s:get_array(fg, bg, a:000)

FUNCTION  <SNR>99_OnBufferUnload()
Called 1 time
Total time:   0.007077
 Self time:   0.007027

count  total (s)   self (s)
    1   0.000089   0.000039   if !s:AllowedToCompleteInCurrentFile() || empty( a:deleted_buffer_file )
                                return
                              endif
                            
    1              0.006980   py ycm_state.OnBufferUnload( vim.eval( 'a:deleted_buffer_file' ) )

FUNCTION  <SNR>91_get_array()
Called 22 times
Total time:   0.000429
 Self time:   0.000429

count  total (s)   self (s)
   22              0.000069   let fg = a:fg
   22              0.000061   let bg = a:bg
   22              0.000261   return has('gui_running') ? [ fg, bg, '', '', join(a:opts, ',') ] : [ '', '', fg, bg, join(a:opts, ',') ]

FUNCTION  <SNR>99_OnVimLeave()
Called 1 time
Total time:   0.000091
 Self time:   0.000091

count  total (s)   self (s)
    1              0.000089   py ycm_state.OnVimLeave()

FUNCTION  <SNR>99_AllowedToCompleteInCurrentFile()
Called 1 time
Total time:   0.000050
 Self time:   0.000050

count  total (s)   self (s)
    1              0.000013   if empty( &filetype ) || getbufvar( winbufnr( winnr() ), "&buftype" ) ==# 'nofile' || &filetype ==# 'qf'
                                return 0
                              endif
                            
    1              0.000005   if exists( 'b:ycm_largefile' )
                                return 0
                              endif
                            
    1              0.000009   let whitelist_allows = has_key( g:ycm_filetype_whitelist, '*' ) || has_key( g:ycm_filetype_whitelist, &filetype )
    1              0.000006   let blacklist_allows = !has_key( g:ycm_filetype_blacklist, &filetype )
                            
    1              0.000003   return whitelist_allows && blacklist_allows

FUNCTION  airline#extensions#tabline#default#format()
Called 2 times
Total time:   0.000266
 Self time:   0.000199

count  total (s)   self (s)
    2              0.000007   let _ = ''
                            
    2              0.000011   let name = bufname(a:bufnr)
    2              0.000007   if empty(name)
                                let _ .= '[No Name]'
                              else
    2              0.000005     if s:fnamecollapse
    2              0.000091       let _ .= substitute(fnamemodify(name, s:fmod), '\v\w\zs.{-}\ze(\\|/)', '', 'g')
    2              0.000004     else
                                  let _ .= fnamemodify(name, s:fmod)
                                endif
    2              0.000002   endif
                            
    2   0.000107   0.000040   return airline#extensions#tabline#default#wrap_name(a:bufnr, _)

FUNCTION  airline#builder#new()
Called 1 time
Total time:   0.000049
 Self time:   0.000049

count  total (s)   self (s)
    1              0.000010   let builder = copy(s:prototype)
    1              0.000004   let builder._context = a:context
    1              0.000003   let builder._sections = []
                            
    1              0.000022   call extend(builder._context, { 'left_sep': g:airline_left_sep, 'left_alt_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_sep, 'right_alt_sep': g:airline_right_alt_sep, }, 'keep')
    1              0.000003   return builder

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    1   0.009550   0.000067  <SNR>25_on_window_changed()
    1   0.009445   0.000169  airline#update_statusline()
    1   0.009276   0.000111  <SNR>26_invoke_funcrefs()
    1   0.007391   0.001070  238()
    1   0.007077   0.007027  <SNR>99_OnBufferUnload()
    5   0.004770   0.000165  <SNR>94_get_seperator()
   22   0.003551   0.001132  airline#highlighter#get_highlight()
    6   0.003260   0.000256  <SNR>94_get_transitioned_seperator()
    6   0.003004   0.000162  airline#highlighter#add_separator()
    6   0.002842   0.000419  <SNR>91_exec_separator()
   12   0.002051   0.000146  airline#themes#get_highlight()
   44   0.001990             <SNR>91_get_syn()
    5   0.001885   0.000239  <SNR>94_should_change_group()
    1   0.001725   0.000216  airline#util#exec_funcrefs()
    1   0.001216   0.000144  airline#extensions#default#apply()
    2   0.000989   0.000194  <SNR>96_build_sections()
    7   0.000795   0.000294  <SNR>96_add_section()
    7   0.000749             <SNR>94_get_accented_line()
    5   0.000640             airline#check_mode()
    2   0.000578   0.000077  airline#extensions#tabline#get_buffer_name()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    1   0.007077   0.007027  <SNR>99_OnBufferUnload()
   44              0.001990  <SNR>91_get_syn()
   22   0.003551   0.001132  airline#highlighter#get_highlight()
    1   0.007391   0.001070  238()
    7              0.000749  <SNR>94_get_accented_line()
    5              0.000640  airline#check_mode()
   22              0.000429  <SNR>91_get_array()
    6   0.002842   0.000419  <SNR>91_exec_separator()
    8   0.000467   0.000413  <SNR>96_get_section()
    5              0.000381  airline#extensions#whitespace#check()
    6              0.000372  airline#highlighter#exec()
   15              0.000299  airline#util#append()
    7   0.000795   0.000294  <SNR>96_add_section()
   25              0.000285  airline#util#wrap()
   10              0.000262  <SNR>94_get_prev_group()
    6   0.003260   0.000256  <SNR>94_get_transitioned_seperator()
    5   0.001885   0.000239  <SNR>94_should_change_group()
    2              0.000235  <SNR>89_get_buffer_list()
    1   0.001725   0.000216  airline#util#exec_funcrefs()
    2   0.000266   0.000199  airline#extensions#tabline#default#format()

